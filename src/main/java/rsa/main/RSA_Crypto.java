package rsa.main;

import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Random;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class RSA_Crypto {  


	protected String getSaltString() {
        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 16) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;

    }


	    public byte[] encryptAES(String strToEncrypt,String iv,String secretKey) throws InvalidKeyException,
	            InvalidAlgorithmParameterException, IllegalBlockSizeException,
	            BadPaddingException, UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException {
	    	SecretKeySpec keyspec = new SecretKeySpec(secretKey.getBytes(), "AES");
	    	IvParameterSpec ivv = new IvParameterSpec(iv.getBytes());
	        byte[] byteToEncrypt = strToEncrypt.getBytes("UTF-8");
	        Cipher cipher  = Cipher.getInstance("AES/CBC/PKCS5Padding");
	        cipher.init(Cipher.ENCRYPT_MODE, keyspec,  ivv);
	        byte[] encryptedBytes = cipher.doFinal(byteToEncrypt);
	        return encryptedBytes;

	    }



	    public String decryptAES(byte[] byteToDecrypt,String iv,String secretKey) throws InvalidKeyException,
	            InvalidAlgorithmParameterException, IllegalBlockSizeException,
	            BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {
	    	Cipher cipher  = Cipher.getInstance("AES/CBC/PKCS5Padding");
	    	SecretKeySpec keyspec = new SecretKeySpec(secretKey.getBytes(), "AES");
	    	IvParameterSpec ivv = new IvParameterSpec(iv.getBytes());
	    	cipher.init(Cipher.DECRYPT_MODE,keyspec, ivv);

	        byte[] plainByte = cipher.doFinal(byteToDecrypt);

	        String plainText = new String(plainByte);

	        return plainText;

	    }








	   

public static void main(String[] args) throws GeneralSecurityException, NoSuchPaddingException, UnsupportedEncodingException {
	RSA_Crypto o=new RSA_Crypto();
	String IV=o.getSaltString();
	byte[] as=o.encryptAES("Hello Apigee !!!",IV,"12345678123456781234567812345678");
	System.out.println(new String("AES ENC DATA:"+as));

	
	
    String publicKey ="MIICITANBgkqhkiG9w0BAQEFAAOCAg4AMIICCQKCAgB29Ugxw/bpNlFlLMrP8IE4e1zHtCk4u6O7QEcw7b0GML+AACTv8pDipzrS34dlNJHJHSZ8vgrQCJFA3gm310+bE8V1JeJ9QKK+G1GtsFBVwCgBjHLdlNmcXpYUDQeX0oMi8ts5Nm1cIr1bWrEeabPnsLoFs4VEfho+5/kpto5bwjnKwHO92zCBvDrCaYILJQLgvbCKT8WRLe37jBGApdPjhK05DfFoh52cJVbjhu0KOuHanvx0begI7ApBiybleo6vxgOW4Oo46+I9qNqof5zrYRlJYHY087VH+eRA7R2+VjfeAWLh/qBs4vwZxvDfWe/9IeHn+2LRUGF7faPmHajYF+8ikfhK6i742DzkqgD1MYtZHOzYsWE9W8+rASh8ijmeHVt1mbbiibMoahnhB/S8Yl+NjCqBKldBKaeIIoZPsyrEDF5iHYV1ll3k0d70NzKnIPaHaaYY8EjKaA4gznsxfE1xOOBjYuhhC1xYwrgrd5G5fGwvHMxDSYQ3phPAZaRlqeErpz+elZkNEWuba2F7H4rWcEb2OMlG1sirquQlXQc1POE8ikE72gpgZpLoLFVPqs4VeMZJoZnXgHuMGb0+hBbW4gEBitaOHH9RsxCdjLuvZJ2dHKbRblRxb3DggwnsUTM/QtXhutE0nqhPMj+nrSfj5VQFYFN6lEfqK4EvPwIDAQAB";
 
        byte[] encryptedKey =EncryptRSA.asymmetric_encrypt("12345678123456781234567812345678".getBytes(), publicKey.getBytes(), "RSA","RSA/ECB/PKCS1Padding");
        
        byte[] enc=EncryptRSA.encodeToBase64(encryptedKey);
        System.out.println("RSA ENCRYPTED AES KEY:"+new String(enc));
        
	       
      
        
        
        String EncData = "Y273hFmuUUTjU7Ws9Fmsx5bXdSKmJu2yXkt+jcc42MUoTrosl8dye2LDY6EctXd96TwS0FBbK9XU0QdKgkUKugWOGz7qwovwFrflxDdaYx5OXF3TaT1QVLgg8rSNl2gx/c3QaBhCnIbY6jG5W8R507+cQ/vLCuYDb40zcXrXzqk1BvHlibKM3dlkaeKWbxAQvQPGsHFRAtyMtvjYDdQzsmXJF1DS17osGTGkEQYkI7AFYehXvxbs4Ow2HLC2JXMCfVA2N9en8ICx1SxiNdQ2RPaWvm7k1yue5wH66GWtX+QqnbJc7ro6N/Vt4APoYKJ8b2xYs2vlQJKXLGv9D43KHya62K0Fo3XlkEIJJK8x6YdoQQBqNVYANaakQ9C0lZyPDpHeLkRfDJGlkqBfSZhnuU28IOk8sc7JHWkBeJVmAkFK05sbHXh76vI/Ee4aNo9ePnLvZIiaFIrjHGEARHbG6Hhn/FAEY7zB2s3erbkm0XB48qbLkOg70dkxvJ0EY4ERQJWwTPvW4bEggx62+UhXhFKvK3RLRZFsI5nezBIytEN6lUDen9AUCyBbdTEZm9U7EFIZ/45lMw0g0PaKBbBSQb/wdXApw8i/w5sLMTo0ScL93U0T5A8CYY5bnzdcdOAYN9VWwl4nXfg7LUmnOqPCs56gmZO0O7A8bSIdtR5UnbU=";
                
        String privateKey = "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";
        String content ="R3h4UlhGRmlaWWNWckdOb3NuTldTNGpMcElkTUdHeTd0WElUM1F4VFgybmErMUJWS1MrMmZDOVhBRFl4NTNRcWNlRWhqU1NrTmhKSHlXM2tFYVBDNm5JWGpnUUdMTThRM0lKTXhFVk1jWjY4WVk4UDJET0p3NURwV1dVQmtqc0p2VjcralVkMEJDRlA0ZmpIbGY4T0ZvdE8xbkZpN3plbHV3Q1Rxb3FKcFVrLzBtRmFSQlpRWVZvUGFCLytoT0JZWG9IZUY0eTRqV2NYbzk4QXIyK2poZHFHaGlvWVNVbkxSTFgyT1UrT3NROWt2eS9ZN1c1eHFoU1VsZEZaQi9VcXQwUUlGNmVCd2RPOGI3ekp1Z2diNW9INTNlYkVhV1dhR21CZjhKYy9PM0srRHZScXZrVkVGNXVROVN1S2pHQiswVWY0bXk0Q2sydnBFOFV6R0d0WEJXM0luVXhUTFAyQW9SMndza2RoTnFQYXFVUytUczBmKzFZWjIxMlNaNWZNelYzZ3U4TXNvVkVud01HS2ROZXFIenpLOWNyOGRXUnRXSFA5RnVZVmlQZURoNEhTSXNKL1hNM28zZXJobDljc2crVEJ2b3d1S2tvN3dISW91cDJoSGxKY2doSmxKclRSU1Z2YWt1aFRidXlUNXVKcDhDUmRFNUdGa3I4M04rQU5IeEJZTHNTcm5iSjdvVE9hOWRySjRHb3lUb0J5bDNWczh0UlRPZVNlZ29aWm55eWQxcC8yb0JFU0hwTWoyenJlR1NpaVdIQWtvK0docWtBelJpVnlpbStvUkZvRjVDbjNRdTQ3WFowaDNWazRNQTdaeUtWSFFYd0VNazJOVmY5c0c0bTRwRUhlYitMRXR2dTNiY2pqSjZwc1F1TGRxR1krTVg4bktGaWRPRkJxK044Z1k0YlZDTVBKQWQrQjlpUUtMZkNFMUk3NDQ0dDhhbnBLc1JaUFBUQmJ6MmxHWVdTRXN4MmhyRHlneDBvUXpISkhja2wrRVJtVWFERUlhUlkxV3VvUkJOTDUyVEhvS3VhSmZKTzBzQnQ2dVdXUlo0VFBsd1ZCdysxZmJHaVVqZ25nNDBGdmNpbUQvUzhyamtFdUZPSnVhenpyQVJXZ2tRSGozQVlZeTBsajNWMDFjUWFZc2dSTU9Ic0twdmlkWEZJOFpIMUk1ZTI4TVhhZE1adng2V3Q5ZVE2c0RzVFFjZjZodlk4bmw1clpqdWNtRWczM0wzU25UUFUxb1duNG9OTG1uVXhiV01MR0xYZ3g2V2lRN0ozNzUrVHVjbmtSNEpqeWlrcTlKRWR3TjRHQnlEa2dKVEhpdHJhN1pOSVRhNTJ5Q1djK04yQUNHTWkyMndmaEY0SDhCbjdxUlZXVkQ1VFp2dWZpY201cmo2SlFoSmVTaFVkWVFDc2lMM3g4N05jVXFUcmo4Y3ZkSGIrcnFUT254d1dXYnMrRFlLY1FwODlBQmttUWRFT3RMVE9qOHZjenF6c0dZdmwzNWRqRzB4aDVpUEJyTGlWWm5aVUY2VFcwdFNVeSszWWRCTHZDZFR2MXVqT0x4bjZhU2ZIa0RyTGhXMDVUcExFWUU5cmNzYTErd1oyMGdTYWJMMmkzSzFPbUpSVCs5NFNZUGRvREhiSGQzbThueWhtb2hxODJHcHVNWWwwRGk3WXByYStxcjRVejliQkZOMzNzcEFNRVFkQ0Y0dzBhZlRFYUU0VEpBTmtmTTVaZWpEY0MrYnhSSXdZcDVrZkU4WmxHaFZNNUpSOExkVmh1OWZUNlU5Qk1OOVBOOWdCdDFvYm5EWkdMS1NtMnoxSm16VW5vMUMybnZ2RnhoK1krVmF0ZGEzQ2lvc3RwYXlHT1lkRWRNRUJjNjRmd0kxRGJhWC9UQ0lPOWxZN0U2K1R5dE5la3NGcVJhRlU5ZTFpWWVQUFQyZTdiWHd3ajExSlZLTjZObFlNMGRnakZKLyt5aWJobmNreFViaU4xNnpoVXpSWTkvTmxkUkNRVnB4ZUVGcGNVUm11bmVJNE5LUFREWnFJVHh2ZXlsTlBHbHFKa1h1Q2pzOURaRndoakRGbzd2cGlaYWh1WXFmQkd2eTV3MTFnS0FOcFRDTGwzYkxFOFFMRkRFL3VmQlBPbk14a1NmSnpHZ1RXU08wa1dlSnE5SFhpanRyMDIxa3BCdUk0M2ZuWEJIcEVMWDR3UnlCSFY4RWdwQmcxWW9tOXZaK3B3bWVVTTQyK25tbkJGWTNySTBOQ2VETHdTeWI4S2M0NFZBVVZ0SkYxMUc1YURRQVYwaW5oNjJxUWs0TkdqWGRLSmtncm1CdVhOM1h3NkoxY2V1a0lEVWlHQTdwVXpzRjlsYmswbERKdFFVR2R2SVdrWFM2VVB1N0VKVUFwUzl2Z2cra1ZNbDRzajZKWFNKWmpCVjA3Tk54eTJTWXBwR0ljVDVhR25ySmljbTkyQXdiMDU3Wk9wM2hMbG1KTG1DbmlDUkVZVmk2YmFvaGVjUUdydEYyekd5VzFla0FMWUZXVlA3cU5VV3BhWTNKTzg0ZklNZ0Vob0dPdHF5c0ZQQ253cldqZGoxcjc0a2RyUThJeHF1eHJZQmNkTVY4eWozazh5WnpyZFFjVDM3SkRnY25WL3V0ZUtra1JiSFRlSjZ5b3dzRmlWa1dDYXhQZGUybmI2Nk1OY05lR0ZMZlFYV2pGMFdvZ1l4N2FYdEkvZHY1TDJzOEszKzRmYjRMei9qS3VwTENLTzRaeGMrS3JVY3N4bHlCOHl0RmoxWCtWelRmTGhMKzUxMUwwakc4MDU2NFlHbjVSZlBzTWdPSEoyTVNvZUJteDNwdi9Kb09OUkxXcWdPRXVGVjNKQ2lCZXpwSmEyU0NhcHVFeHlSMG5BbnJsd0pzYnJRcG1ZZG9KbzY4UksyL2xkWGlxNG1ucTFqaU9hQ2VobWk5VlY4Y2xvL2dEZE4wYW5WSFRYU3piTWtXc1ltTmdUWkdYVVZqT0ZDMEdnMWhSNTdvZ0c0WEthTjJIaXpMd0trR2g1WTJSM2RpM3htNjFKMWlPekMrL2dUVnc1cnBvdzJqc09adEdQVnNPeFFSRklKVjJFZ3lsY0lrTHlsWE1IOXplUE5yOERqTlhDeG9aaU9ocmIvNTJvdGVqOHYvTE9DTlFXdzZXbVdvdXpzbU1xRWVRYm9xS0szY2ZLN0lLUGlIQnRnU3hxQkNPWVdVZHdnSGFzc3g3SndNenM2dzhjcG9Rb2J6SDN2ekQrdjg2ajN1dVRHcW9XODJ2Yk5ueGoxWXFJWUpHVjlZa0t1WmJCUnUyNE9jdTFFcGxTRzhxTGJYcnc3SjI4cEVZc0RCbStFNkp2UzdHbTdqcFIvWE45aDRubWVPem9IeVM0Y25vZXZETmhrL1lpdFowLzRzU2NVT0RWQ1Y2NXkvbFFRanRBL3ZNcXFYWGRvZ1M4cDFsOHl4blFKb3A0ano1VHg3ZzhMUExlbDhvcE5ZdWhLQlM5VGZWMENrQ1V0RHAwL0lMNEFHNUpqcVoyeEFBd3Vlck1SWmNJN3Q4YUVlL2pkeVdNa3ZxMk5ZenhncUZtd3JocDVDdzVsNklMVXJwMGhGUGRRYzh4N1Z1Y0xwcjlwVEo0cUJ0M1ZBYXE2UFlscDBmYmlhdi84RnV6L2VobnQ2UXBlczQrczZIOGdidlZSVUZwSmNpd3pyWW1rT29rNmNxaFRTV3pFZmxEWDVkd1ByblZWcHNTUlBtN08zUE45dlB1SE5uV1BhVXBJNmlLK1M1QUJpQTFUSDhQcmtlWDZMMllIQWtQU282elZVc1BZVEFmOFFiNDUvY0xjS0tCQkxRNHpreldyMEpjSjVMQjNIRFo4YWRvdE5oZlJhSU1sMGJsQk9ISXNkbi9iaGRoamtqWnNFMWJDNmFMVTFlZTJwYVo4dkIzSVlENG5RMVoxTFJiUnc0U1hKa0NTbmVXVlFPV3czWm1NTUFpWWtGc3plQTFmaS9DVFNNSHJ1RmNNbUJuTlVqdktvSEUzZEdOZ0RNdzM0RGxXVis3MEhKeXJKMnNuTFFHeHhqYUEwSUNmNGZkVmVhazc1Yy9TMCt0YVFjbVRzQ2pWRnFXbU55VHZPSHlESUJJYUJqcno5UEdFd3k1SGYxcWQ4QUNuVmNQYlBDTWFyc2EyQVhIVEZmTW85NVBNbWR4dHBMQU5kSThZbXdBbEhPa2prY01sK3dWMzEwa0hqMkVTdmNjajdMRGN0cDIrdWpEWERYaGhTMzBGMW94ZEZwdHRiV3d2NE9nR05vNEIvcVNaeS9OaW5yb2VCZTVPWjVYbWhRaXY1ZXVkZ2RTaTR6cW1sRGptMWdEY1BNUkU1andqR3E3R3RnRngweFh6S1BlVHpKbjFtMjNUbms5UGJVN2c1dlAvQkl0ZnhwejU5Zk5EcXl2RENsa1F2SUVzdXM3RytjcWlrbFVMZm15UnNqRVhackJ3Q2NhQVE1OWNESXNUb05nL1lNaXF2MFJ5WExQNVR6SVREQmV4VVZnVVFYSnlOS2phb1FFSmwrMlNPUENacndQU25lV1ZRT1d3M1ptTU1BaVlrRnN6VEhLTWhaYnRNRHRDOGhsZlVpMlE5b2VCSFNrbmw1Zm1ZU3NpRzh6MjdrZUdBRlNGQUpJL3lwSml5alVzRVdFR0xmalVET0RsVW1iL20rNElUSWVSZEFZQVNEK1BzNTN6Q085TWc0L1dvdE5CMms3V05aWGsyL1FvSW1sSE9wN3hOWTlwU2tqcUlyNUxrQUdJRFZNZncrdk1EdzdEd1lSTGdEMndoSTNoa0g0cUFCUW5tSVFQQ29SU0RzdlVBd3I2MkRIRnNsNG1FNllHbVRNelRHaVQ4OFNQa1FpVVVqQ0VMSFhaTXJmUGNJSlBWVGR1S1BnYnI3RG5YeHdnY0k2SEFuVmhoWFNwU05makthc0tWYUhITHNsakpMNnRqV004WUtoWnNLNGFlUXMzK3czbjZISGp6WDBlRGtsT3hpNjN6MFVwbUFlTFkwbEhIVUhKZSsrNU1RemFTcGpmcFlIWVhjY2FjVFBWRDhEN0p1Mll1WjYyNllUdkFHS3VvUENzblo4T3V0L1QzZ0dxSFo1UVIwRXQzT3hoZzY1UDFhWVJVUHZrcGo4V0FzcjdqcFIvWE45aDRubWVPem9IeVM0Y3ZkNDBMMVZJdWdTNlZ3cEZDTWdpRVZ4bEJSdjVtMnJkYTNETXYybWwzZGw3SnUyWXVaNjI2WVR2QUdLdW9QQ3NqdXJKeTRMWGxYS0Z6TFlNWnFSRUdLa1hIT054WmRncHZZc3g1MCtxVWNrTEdCK1NuZSs1eGhyM0Zxa3hCMHZLUmJEcGFaYWk3T3lZeW9SNUJ1aW9vcCtlRThPVGR3Q0wzRU9zUC9uSWdIOE1JVmhuaHdISXdwVDlKWSs1Zk5YVFR1ckp5NExYbFhLRnpMWU1acVJFR0s0SmZ2b0pDR09PMUpmTVhwcUQ2UWtkMUZ5cTVuSnRacjlqcHU3d1NGN2FVSnhoUFdSNlFoTGd5cDJWYkFLSUVlbG56bnQ0cXM4SlRVV3g5YjZZU1h3SitySGZFVG5kS09aamFJZnYzbW9DL1BaT3VkQjNia2Z3NURNOWhoRkp5d1hLZ3VJTHZiQTdJako1ZWdaeFFISERPZWdjRFZ6VEQ5SEsrd2xvTnQ1c09nSzNpbTJxLzNuaERiTENDeGRlNmRFQVR6cm82azh4L1MyUjFwSXRpcFVJL3RtN2lpUm1wMjlvRm9xa203amEzMjRKVVNudGhhL2t1bXcvUzhLOExJdEVkMklNMzBHektlUm9rNEJMc0REQ2lwa080VndtdlZwRjBPNWtaQUw5cVZ3SnZveXFWT2VFZTViWGZYK1R1MFE0dkZ3N0UxS0R0TXQxQ2grNlA2cDVqR3B3b09wNFI4clJhNk1QTlROcDBpL0VXQ1E0MXRTSldVc1NsU0NvSk1uZkhldHcvVW8waWJiTHE0YXFHY2N6VmFTR3dxZHRZTDZTaFBaUUluUWRQT3FxRUhtRG1TY1FOZVUyZ3dsQWoyZU5PM2Q0RDB0MHJDdXJUUWloTjhzOHhteU1LRHZwVDdob2cvc25iWWQ2QXg2eUlwRnZCKytvNG1RdzMrcTdnWGd1aWpDVG5uY29TSUUzekY1M3pNVGVQdjRidkNzVVRHN0N3UnNWaWhxRmlMMkNjVjZ2b0xBcTN1cDBGcEZ6WEVRRzZLek1tdk51WEhIZVdieVd5WENGTzVpVXU1cjNyTFIzeGVQd1Z5OVlHN05UZVViVFBuTkxYclRPRExQMTJoWHZxb3NvajZMVUIrUlMxTnhqak9aY3h1MElqR2tHUkZRTXlNV3d4SXB2ZlJPNFdiVy8yN2tHVDMzUGtQcGwzbmRMLzFzRUVSSk1hcExPY0sxelFjV0RtQTUrY29qWkNyYkZNL0o5eWlCQ1ZUOUI5SHNiMDJVMTlGYkUwWWZsQXJLS2tmd1hxdU5UcGRydmMwbHdxSDZoQk1NQ1QvRkxiZjhzSFA2eHJSRXJVd0Flb0R6SlRpNUo0eHV6dURYcVl1RGpleDRmK3NDMlFIZkNWcVpmempVa0tRV3dhSG1nb2dHMmJ3RUZzT0lwR2hmOGl4a1AxNUNtQzBCRk14dklGVGhSNi96NWs5YXVlTmlDZVJ5R1piWEJVZ0lCUkhRZWJrVWRLeTNzTzgyR2hwUDlMZzZJQnNocDRCTGRUTXl2bWRWZEVRUGRsczdFL0hCVVhveC93NUZwaUpLTXNtc0xnZ0ZzZEszTjBndjNuSmN3bFB6a2g2NGI1amVjZ20rMkRYRjVORXhzR0FVSlUvNlJHQUlhbnNqUWVUaEh1M3VoQzJXYXV6RXJzNUhxM1l4eGFvTXc1NEVkaXRyUThTeHNvMTNwaXUxVTFyQ0poUWRpc3hnM29ueCtjcTFVMHBGaXdmdTBvVzVvV05qMmg0YmVRQXIwSWcwTE1DRlJKbEwwY1d3aW5vMk5pTmtXaTAvUVY1WE9USUlwRXRhN0MreGRDRkFMVkdKS1VGLzRsUlpWUHBBMG5pWjFadFFVVkc4UnJielNHUWQ0aFVKWHBYYXpUUHljSlozNzRiR1RkZHI3RGFaU2E1cVNuTUhxZkZnRVIzUzhOWXZ0STJPdmpUL3VLSlFBSHdVQTl5eDRrN3ZmclM3ekcvLw==";
            
        byte[] dec=DecryptRSA.decodeFromBase64(EncData.getBytes());
                
                byte[] decryptedKey = DecryptRSA.asymmetric_decrypt(dec, privateKey.getBytes(), "RSA","RSA/ECB/PKCS1Padding");
               System.out.println("RSA ENCRYPTED AES KEY:"+new String(decryptedKey));
        
        
           	String ori=o.decryptAES(as,IV,new String(decryptedKey));
        	System.out.println("ORIGINAL DATA:"+ori);
}
	}
